From 3f30f554e57bf2b2ac7436696206db4bc92e735c Mon Sep 17 00:00:00 2001
From: Vishal Bhoj <vishal.bhoj@linaro.org>
Date: Thu, 4 Apr 2019 14:35:53 +0530
Subject: [PATCH] xlat: update header to fix build failure

Header is created after including these patches to fix build failure
with gcc 8.3:
https://github.com/strace/strace/commit/b89a69dec27cf638df0e17db80ed937c3e1abf77
https://github.com/strace/strace/commit/0f09267db00468b9204395c6990fc8816fd3c0e5#diff-1baab02dbaf860e4b502f71100541c74

Signed-off-by: Vishal Bhoj <vishal.bhoj@linaro.org>
---
 xlat/v4l2_control_id_bases.h | 83 ++++++++++++++++++++++++++++++++----
 1 file changed, 75 insertions(+), 8 deletions(-)

diff --git a/xlat/v4l2_control_id_bases.h b/xlat/v4l2_control_id_bases.h
index e668d941..7f492b37 100644
--- a/xlat/v4l2_control_id_bases.h
+++ b/xlat/v4l2_control_id_bases.h
@@ -12,31 +12,77 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #endif
 #if defined(V4L2_CID_USER_MEYE_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_MEYE_BASE) && HAVE_DECL_V4L2_CID_USER_MEYE_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
-static_assert((V4L2_CID_USER_MEYE_BASE) == ((V4L2_CID_BASE + 0x1000)), "V4L2_CID_USER_MEYE_BASE != (V4L2_CID_BASE + 0x1000)");
+static_assert((V4L2_CID_USER_MEYE_BASE) == ((V4L2_CID_BASE | 0x1000)), "V4L2_CID_USER_MEYE_BASE != (V4L2_CID_BASE | 0x1000)");
 DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
-# define V4L2_CID_USER_MEYE_BASE (V4L2_CID_BASE + 0x1000)
+# define V4L2_CID_USER_MEYE_BASE (V4L2_CID_BASE | 0x1000)
 #endif
 #if defined(V4L2_CID_USER_BTTV_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_BTTV_BASE) && HAVE_DECL_V4L2_CID_USER_BTTV_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
-static_assert((V4L2_CID_USER_BTTV_BASE) == ((V4L2_CID_BASE + 0x1010)), "V4L2_CID_USER_BTTV_BASE != (V4L2_CID_BASE + 0x1010)");
+static_assert((V4L2_CID_USER_BTTV_BASE) == ((V4L2_CID_BASE | 0x1010)), "V4L2_CID_USER_BTTV_BASE != (V4L2_CID_BASE | 0x1010)");
 DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
-# define V4L2_CID_USER_BTTV_BASE (V4L2_CID_BASE + 0x1010)
+# define V4L2_CID_USER_BTTV_BASE (V4L2_CID_BASE | 0x1010)
+#endif
+#if defined(V4L2_CID_USER_S2255_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_S2255_BASE) && HAVE_DECL_V4L2_CID_USER_S2255_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_S2255_BASE) == ((V4L2_CID_BASE | 0x1030)), "V4L2_CID_USER_S2255_BASE != (V4L2_CID_BASE | 0x1030)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_S2255_BASE (V4L2_CID_BASE | 0x1030)
+#endif
+#if defined(V4L2_CID_USER_SI476X_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_SI476X_BASE) && HAVE_DECL_V4L2_CID_USER_SI476X_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_SI476X_BASE) == ((V4L2_CID_BASE | 0x1040)), "V4L2_CID_USER_SI476X_BASE != (V4L2_CID_BASE | 0x1040)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_SI476X_BASE (V4L2_CID_BASE | 0x1040)
 #endif
 #if defined(V4L2_CID_USER_TI_VPE_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_TI_VPE_BASE) && HAVE_DECL_V4L2_CID_USER_TI_VPE_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
-static_assert((V4L2_CID_USER_TI_VPE_BASE) == ((V4L2_CID_BASE + 0x1050)), "V4L2_CID_USER_TI_VPE_BASE != (V4L2_CID_BASE + 0x1050)");
+static_assert((V4L2_CID_USER_TI_VPE_BASE) == ((V4L2_CID_BASE | 0x1050)), "V4L2_CID_USER_TI_VPE_BASE != (V4L2_CID_BASE | 0x1050)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_TI_VPE_BASE (V4L2_CID_BASE | 0x1050)
+#endif
+#if defined(V4L2_CID_USER_SAA7134_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_SAA7134_BASE) && HAVE_DECL_V4L2_CID_USER_SAA7134_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_SAA7134_BASE) == ((V4L2_CID_BASE | 0x1060)), "V4L2_CID_USER_SAA7134_BASE != (V4L2_CID_BASE | 0x1060)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_SAA7134_BASE (V4L2_CID_BASE | 0x1060)
+#endif
+#if defined(V4L2_CID_USER_ADV7180_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_ADV7180_BASE) && HAVE_DECL_V4L2_CID_USER_ADV7180_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_ADV7180_BASE) == ((V4L2_CID_BASE | 0x1070)), "V4L2_CID_USER_ADV7180_BASE != (V4L2_CID_BASE | 0x1070)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_ADV7180_BASE (V4L2_CID_BASE | 0x1070)
+#endif
+#if defined(V4L2_CID_USER_TC358743_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_TC358743_BASE) && HAVE_DECL_V4L2_CID_USER_TC358743_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_TC358743_BASE) == ((V4L2_CID_BASE | 0x1080)), "V4L2_CID_USER_TC358743_BASE != (V4L2_CID_BASE | 0x1080)");
 DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
-# define V4L2_CID_USER_TI_VPE_BASE (V4L2_CID_BASE + 0x1050)
+# define V4L2_CID_USER_TC358743_BASE (V4L2_CID_BASE | 0x1080)
+#endif
+#if defined(V4L2_CID_USER_MAX217X_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_MAX217X_BASE) && HAVE_DECL_V4L2_CID_USER_MAX217X_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((V4L2_CID_USER_MAX217X_BASE) == ((V4L2_CID_BASE | 0x1090)), "V4L2_CID_USER_MAX217X_BASE != (V4L2_CID_BASE | 0x1090)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define V4L2_CID_USER_MAX217X_BASE (V4L2_CID_BASE | 0x1090)
+#endif
+#ifndef STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# define STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# undef V4L2_CID_USER_IMX_BASE
 #endif
 #if defined(V4L2_CID_USER_IMX_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_IMX_BASE) && HAVE_DECL_V4L2_CID_USER_IMX_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
-static_assert((V4L2_CID_USER_IMX_BASE) == ((V4L2_CID_BASE + 0x1090)), "V4L2_CID_USER_IMX_BASE != (V4L2_CID_BASE + 0x1090)");
+static_assert((V4L2_CID_USER_IMX_BASE) == ((V4L2_CID_BASE | 0x10b0)), "V4L2_CID_USER_IMX_BASE != (V4L2_CID_BASE | 0x10b0)");
 DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
-# define V4L2_CID_USER_IMX_BASE (V4L2_CID_BASE + 0x1090)
+# define V4L2_CID_USER_IMX_BASE (V4L2_CID_BASE | 0x10b0)
 #endif
 #if defined(V4L2_CID_MPEG_BASE) || (defined(HAVE_DECL_V4L2_CID_MPEG_BASE) && HAVE_DECL_V4L2_CID_MPEG_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
@@ -145,7 +191,28 @@ const struct xlat v4l2_control_id_bases[] = {
  XLAT(V4L2_CID_BASE),
  XLAT(V4L2_CID_USER_MEYE_BASE),
  XLAT(V4L2_CID_USER_BTTV_BASE),
+ XLAT(V4L2_CID_USER_S2255_BASE),
+ XLAT(V4L2_CID_USER_SI476X_BASE),
  XLAT(V4L2_CID_USER_TI_VPE_BASE),
+ XLAT(V4L2_CID_USER_SAA7134_BASE),
+ XLAT(V4L2_CID_USER_ADV7180_BASE),
+ XLAT(V4L2_CID_USER_TC358743_BASE),
+ XLAT(V4L2_CID_USER_MAX217X_BASE),
+#ifndef STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# define STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+/*
+* Linux kernel commit v4.18-rc2-106-g421860b9d47053badce4b247576fa48df9ab4c48
+* has changed the value of V4L2_CID_USER_IMX_BASE constant introduced
+* by commit v4.13-rc1~141^2~121 because the old value was already used
+* by V4L2_CID_USER_MAX217X_BASE.
+* This is of course an ABI breakage that affects Linux kernels starting
+* with 4.13 and up to 4.18, as well as their LTS derivatives.
+* Since the imx driver didn't provide any public control ID definitions,
+* it looks like the best way to handle this situation is to pretend that
+* the old value of V4L2_CID_USER_IMX_BASE didn't exist.
+*/
+# undef V4L2_CID_USER_IMX_BASE
+#endif
  XLAT(V4L2_CID_USER_IMX_BASE),
  XLAT(V4L2_CID_MPEG_BASE),
  XLAT(V4L2_CID_MPEG_CX2341X_BASE),
-- 
2.17.1

